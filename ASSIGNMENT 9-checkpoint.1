{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5518d335",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a 4-digit number with no repeating digits: 1235\n",
      "1 cows, 1 bulls\n",
      "Enter a 4-digit number with no repeating digits: 6547\n",
      "0 cows, 1 bulls\n",
      "Enter a 4-digit number with no repeating digits: 1475\n",
      "1 cows, 1 bulls\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def generate_number():\n",
    "    \"\"\"Generate a 4-digit number with no repeating digits.\"\"\"\n",
    "    digits = list(range(10))\n",
    "    random.shuffle(digits)\n",
    "    return digits[:4]\n",
    "\n",
    "def count_cows_bulls(secret, guess):\n",
    "    \"\"\"Count the number of cows and bulls in a guess.\"\"\"\n",
    "    cows = sum(1 for s, g in zip(secret, guess) if s == g)\n",
    "    bulls = sum(1 for g in guess if g in secret) - cows\n",
    "    return cows, bulls\n",
    "\n",
    "def main():\n",
    "    secret = generate_number()\n",
    "    guesses = 0\n",
    "    while True:\n",
    "        guess = input(\"Enter a 4-digit number with no repeating digits: \")\n",
    "        if len(guess) != 4 or not guess.isdigit() or len(set(guess)) != 4:\n",
    "            print(\"Invalid input. Please enter a 4-digit number with no repeating digits.\")\n",
    "            continue\n",
    "        guess = list(map(int, guess))\n",
    "        cows, bulls = count_cows_bulls(secret, guess)\n",
    "        guesses += 1\n",
    "        if cows == 4:\n",
    "            print(\"Congratulations, you guessed the number in\", guesses, \"guesses!\")\n",
    "            break\n",
    "        else:\n",
    "            print(cows, \"cows,\", bulls, \"bulls\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2eae928b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
